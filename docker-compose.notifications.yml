version: '3.8'

services:
  # Main notification service
  notification-service:
    build:
      context: .
      dockerfile: docker/notification-service.dockerfile
    container_name: jobfinders-notification-service
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_WEBHOOK_SECRET=${RESEND_WEBHOOK_SECRET}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS:-noreply@jobfinders.com}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME:-JobFinders}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_NUMBER=${TWILIO_FROM_NUMBER}
      - TWILIO_WEBHOOK_SECRET=${TWILIO_WEBHOOK_SECRET}
      - FCM_PROJECT_ID=${FCM_PROJECT_ID}
      - FCM_PRIVATE_KEY=${FCM_PRIVATE_KEY}
      - FCM_CLIENT_EMAIL=${FCM_CLIENT_EMAIL}
      - APNS_KEY_ID=${APNS_KEY_ID}
      - APNS_TEAM_ID=${APNS_TEAM_ID}
      - APNS_PRIVATE_KEY=${APNS_PRIVATE_KEY}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - ALERT_EMAIL_RECIPIENTS=${ALERT_EMAIL_RECIPIENTS}
    ports:
      - "3000:3000"  # HTTP API
      - "3001:3001"  # WebSocket for in-app notifications
    depends_on:
      - redis
      - postgres
    networks:
      - notification-network
    volumes:
      - notification-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for queue management
  redis:
    image: redis:7-alpine
    container_name: jobfinders-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - notification-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: jobfinders-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-jobfinders}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - notification-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-jobfinders}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander for queue monitoring (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: jobfinders-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - notification-network
    profiles:
      - development

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: jobfinders-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - notification-network
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: jobfinders-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - notification-network
    profiles:
      - monitoring

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: jobfinders-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    depends_on:
      - notification-service
    networks:
      - notification-network
    profiles:
      - production

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  notification-logs:
    driver: local
  nginx-logs:
    driver: local

networks:
  notification-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16