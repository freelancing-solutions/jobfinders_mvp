// This is the original Prisma schema file for the Job Finders application
// Based on the comprehensive job platform architecture - SQLite compatible version
// BACKUP FILE - This has been replaced by separated schemas

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Role Enum for type safety
enum UserRole {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

// Core User Management
model User {
  uid              String   @id @default(cuid()) @map("id")
  email           String   @unique
  passwordHash    String?  @map("password_hash")
  name            String?
  role            UserRole @default(JOB_SEEKER) // Use enum instead of string
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  lastLogin       DateTime? @map("last_login")
  lastPasswordChange DateTime? @map("last_password_change")

  // Relationships
  jobSeekerProfile JobSeekerProfile?
  employerProfile  EmployerProfile?
  adminProfile     AdminProfile?
  resumes         Resume[]
  matches         Match[]
  passwordResetTokens PasswordResetToken[]

  // New matching relationships
  candidateProfile CandidateProfile?
  jobProfiles     JobProfile[]
  userInteractions UserInteraction[]

  // Notification system relationships
  notifications   Notification[]
  notificationPreferences NotificationPreference?

  // Analytics relationships
  analyticsEvents AnalyticsEvent[]
  userJourneys    UserJourney[]

  // Template system relationships
  templateCustomizations ResumeTemplateCustomization[]
  templateUsage ResumeTemplateUsage[]
  templateHistory ResumeTemplateHistory[]

  @@map("users")
}

// Job Seeker Profile
model JobSeekerProfile {
  userUid         String   @id @map("user_uid")
  professionalTitle String?  @map("professional_title")
  summary         String?
  skills          Json?    // Array of skills
  experienceYears Int?     @map("experience_years")
  location        String?
  phone           String?
  website         String?
  linkedin        String?
  github          String?
  portfolioLinks  Json?    // Array of portfolio links
  resumeFileUrl   String?  @map("resume_file_url")
  profileImageUrl String?  @map("profile_image_url")
  remoteWorkPreference Boolean? @map("remote_work_preference")
  salaryExpectationMin Float? @map("salary_expectation_min")
  salaryExpectationMax Float? @map("salary_expectation_max")
  currency        String   @default("ZAR")
  availability    String?  // immediate, 2_weeks, 1_month, 3_months
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User           @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  applications    JobApplication[]
  savedJobs       SavedJob[]

  @@map("jobseeker_profiles")
}

// Employer Profile
model EmployerProfile {
  employerId      String   @id @default(cuid()) @map("employer_id")
  userUid         String   @unique @map("user_uid")
  companyId       String   @map("company_id")
  isVerified      Boolean  @default(false) @map("is_verified")
  isAdmin         Boolean  @default(false) @map("is_admin")
  verificationToken String? @map("verification_token")
  verificationTokenExpiresAt DateTime? @map("verification_token_expires_at")
  fullName        String?  @map("full_name")
  jobTitle        String?  @map("job_title") @default("Human Resource")
  profilePictureUrl String? @map("profile_picture_url")
  bio             String?
  companyEmail    String?  @map("company_email")
  personalEmail   String?  @map("personal_email")
  phoneNumber     String?  @map("phone_number")
  alternatePhone  String?  @map("alternate_phone")
  linkedinUrl     String?  @map("linkedin_url")
  twitterHandle   String?  @map("twitter_handle")
  department      String?
  hireDate        DateTime? @map("hire_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User           @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  company         Company        @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  jobs            Job[]

  @@map("employers")
}

// Admin Profile - FIXED
model AdminProfile {
  adminId         String   @id @default(cuid()) @map("admin_id")
  userUid         String   @unique @map("user_uid") // Changed from "admin_users" to "user_uid"
  permissions     Json?    // Array of admin permissions
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User     @relation(fields: [userUid], references: [uid], onDelete: Cascade) // Added opposite relation
  jobs            Job[]    // This will be fixed by adding adminProfile field in Job model

  @@map("admin")
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  PAUSED
  EXPIRED
  DELETED
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  SHORTLISTED
  REJECTED
  HIRED
}

// Company Management
model Company {
  companyId       String   @id @default(cuid()) @map("company_id")
  name            String   @unique
  description     String?
  industry        String?
  website         String?
  logoUrl         String?  @map("logo_url")
  city            String?
  province        String?
  country         String?
  contactEmail    String?  @map("contact_email")
  phoneNumber     String?  @map("phone_number")
  billingEmail    String?  @map("billing_email")
  sendInvoiceEmails Boolean @default(true) @map("send_invoice_emails")
  sendTrialReminders Boolean @default(true) @map("send_trial_reminders")
  employeeCount   Int?     @map("employee_count")
  foundedYear     Int?     @map("founded_year")
  techStack       Json?    // Array of technologies
  linkedinUrl     String?  @map("linkedin_url")
  twitterHandle   String?  @map("twitter_handle")
  isVerified      Boolean  @default(false) @map("is_verified")
  verificationStatus String? @map("verification_status") // pending, verified, rejected
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  employers       EmployerProfile[]
  jobs            Job[]
  billingProfiles  CompanyBillingProfile[]

  @@map("companies")
}

// Job Management - FIXED
model Job {
  jobId         String   @id @default(cuid()) @map("job_id")
  title         String
  companyId     String   @map("company_id")
  employerId    String   @map("employer_id")
  categoryId    String?  @map("category_id")
  description   String
  requirements  Json
  location      String?
  salary        Json?
  status        JobStatus
  applicantCount Int     @default(0) @map("applicant_count")
  isRemote      Boolean  @default(false) @map("is_remote")
  experienceLevel String? @map("experience_level")
  employmentType String? @map("employment_type")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  expiresAt     DateTime? @map("expires_at")

  // Added admin relation fields
  adminProfileId String? @map("admin_profile_id") // Added for AdminProfile relation

  // Relationships
  company       Company        @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  employer      EmployerProfile @relation(fields: [employerId], references: [employerId], onDelete: Cascade)
  category      JobCategory?   @relation(fields: [categoryId], references: [categoryId])
  adminProfile  AdminProfile?  @relation(fields: [adminProfileId], references: [adminId]) // Added opposite relation
  applications  JobApplication[]
  savedJobs     SavedJob[]
  matches       Match[]
  jobProfile    JobProfile?
}

model Match {
  matchId      String   @id @default(cuid()) @map("match_id")
  jobId        String   @map("job_id")
  candidateId  String   @map("candidate_id")
  score        Float
  criteria     Json
  status       MatchStatus
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  job          Job      @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  candidate    User     @relation(fields: [candidateId], references: [uid])
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model JobCategory {
  categoryId      String   @id @default(cuid()) @map("category_id")
  name            String   @unique
  description     String?
  slug            String   @unique
  icon            String?
  color           String?
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  jobs            Job[]

  @@map("job_category")
}

// Job Applications
model JobApplication {
  applicationId   String   @id @default(cuid()) @map("application_id")
  jobId           String   @map("job_id")
  jobSeekerProfileId String @map("jobseeker_profile_id")
  resumeId        String?  @map("resume_id")
  coverLetter     String?
  status          ApplicationStatus @default(APPLIED)
  matchScore      Float?   @map("match_score")
  appliedAt       DateTime @default(now()) @map("applied_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  lastStatusUpdate DateTime @default(now()) @map("last_status_update")
  viewCount       Int      @default(0) @map("view_count")
  lastViewedAt    DateTime? @map("last_viewed_at")
  resumeFileUrl   String?  @map("resume_file_url")
  source          String   @default("direct") // direct, linkedin, indeed, glassdoor, other
  referralName    String?  @map("referral_name")
  referralEmail   String?  @map("referral_email")
  referralRelationship String? @map("referral_relationship")

  // Relationships
  job             Job              @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  jobSeekerProfile JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [userUid], onDelete: Cascade)
  resume          Resume?          @relation(fields: [resumeId], references: [resumeId])
  timeline        ApplicationTimeline[]
  attachments     ApplicationAttachment[]
  notes           ApplicationNote[]
  interviews      InterviewSchedule[]

  @@index([jobSeekerProfileId, status])
  @@index([jobId, status])
  @@index([appliedAt])
  @@index([lastStatusUpdate])
  @@map("job_applications")
}

// Saved Jobs
model SavedJob {
  savedJobId      String   @id @default(cuid()) @map("saved_job_id")
  jobSeekerProfileId String @map("jobseeker_profile_id")
  jobId           String   @map("job_id")
  savedAt         DateTime @default(now()) @map("saved_at")
  notes           String?

  // Relationships
  jobSeekerProfile JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [userUid], onDelete: Cascade)
  job             Job              @relation(fields: [jobId], references: [jobId], onDelete: Cascade)

  @@unique([jobSeekerProfileId, jobId])
  @@map("saved_jobs")
}

// Resume Management
model Resume {
  resumeId        String   @id @default(cuid()) @map("resume_id")
  userUid         String   @map("user_uid")
  isPrimary       Boolean  @default(false) @map("is_primary")
  professionalTitle String @map("professional_title")
  summary         String?
  skills          Json?    // Array of skills
  portfolioLinks  Json?    @map("portfolio_links")
  resumeFileUrl   String?  @map("resume_file_url")
  profileImageUrl String?  @map("profile_image_url")
  location        String?
  phone           String?
  website         String?
  linkedin        String?
  github          String?

  // Template integration fields
  templateId              String?  @map("template_id")
  templateCustomizationId String?  @map("template_customization_id")
  templateData            Json?    @map("template_data") // Template metadata and settings
  integrationMetadata     Json?    @map("integration_metadata") // Template history and analytics

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User            @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  applications    JobApplication[]
  experience      Experience[]
  education       Education[]
  certifications  Certification[]
  languages       Language[]
  projects        Project[]

  // New template relationships
  template                ResumeTemplate?         @relation(fields: [templateId], references: [templateId], onDelete: SetNull)
  templateCustomization   ResumeTemplateCustomization?
  templateHistory         ResumeTemplateHistory[]
  templateUsage           ResumeTemplateUsage[]

  @@map("jobseeker_cvs")
}

// Experience
model Experience {
  experienceId    String   @id @default(cuid()) @map("experience_id")
  resumeId        String   @map("resume_id")
  company         String
  position        String
  startDate       DateTime @map("start_date")
  endDate         DateTime? @map("end_date")
  isCurrent       Boolean  @default(false) @map("is_current")
  description     String?
  location        String?
  skills          Json?    // Array of skills gained
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  resume          Resume @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("experience")
}

// Education
model Education {
  educationId     String   @id @default(cuid()) @map("education_id")
  resumeId        String   @map("resume_id")
  institution     String
  degree          String
  field           String?
  startDate       DateTime @map("start_date")
  endDate         DateTime? @map("end_date")
  isCurrent       Boolean  @default(false) @map("is_current")
  gpa             Float?
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  resume          Resume @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("education")
}

// Certifications
model Certification {
  certificationId String   @id @default(cuid()) @map("certification_id")
  resumeId        String   @map("resume_id")
  name            String
  issuer          String
  issueDate       DateTime @map("issue_date")
  expiryDate      DateTime? @map("expiry_date")
  credentialId    String?  @map("credential_id")
  credentialUrl   String?  @map("credential_url")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  resume          Resume @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("certifications")
}

// Languages
model Language {
  languageId      String   @id @default(cuid()) @map("language_id")
  resumeId        String   @map("resume_id")
  language        String
  proficiency     String   // beginner, intermediate, advanced, native
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  resume          Resume @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("languages")
}

// Projects
model Project {
  projectId       String   @id @default(cuid()) @map("project_id")
  resumeId        String   @map("resume_id")
  title           String
  description     String?
  technologies    Json?    // Array of technologies used
  projectUrl      String?  @map("project_url")
  githubUrl       String?  @map("github_url")
  startDate       DateTime @map("start_date")
  endDate         DateTime? @map("end_date")
  isCurrent       Boolean  @default(false) @map("is_current")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  resume          Resume @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("projects")
}

// Billing System
model BillingPlan {
  planId          String   @id @default(cuid()) @map("plan_id")
  name            String
  description     String?
  price           Float
  currency        String   @default("ZAR")
  durationDays    Int      @default(30) @map("duration_days")
  isActive        Boolean  @default(true) @map("is_active")
  isFeatured      Boolean  @default(false) @map("is_featured")
  isTrial         Boolean  @default(false) @map("is_trial")

  // Features
  maxOpenJobs     Int?     @map("max_open_jobs")
  maxUsers        Int?     @map("max_users")
  maxApplicantsPerJob Int? @map("max_applicants_per_job")
  allowPrioritySupport Boolean @default(false) @map("allow_priority_support")
  showBranding    Boolean  @default(true) @map("show_branding")

  sortOrder       Int      @default(0) @map("sort_order")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  billingProfiles CompanyBillingProfile[]
  invoices        Invoice[]

  @@map("billing_plan")
}

model CompanyBillingProfile {
  profileId       String   @id @default(cuid()) @map("profile_id")
  companyId       String   @map("company_id")
  planId          String   @map("plan_id")
  isActive        Boolean  @default(true) @map("is_active")
  subscriptionStart DateTime @map("subscription_start")
  subscriptionEnd DateTime @map("subscription_end")
  autoRenew       Boolean  @default(true) @map("auto_renew")
  paymentMethod   Json?    @map("payment_method")
  billingEmail    String?  @map("billing_email")
  billingAddress  Json?    @map("billing_address")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  company         Company     @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  billingPlan     BillingPlan @relation(fields: [planId], references: [planId], onDelete: Cascade)
  invoices        Invoice[]

  @@map("company_billing_profiles")
}

model Invoice {
  invoiceId       String   @id @default(cuid()) @map("invoice_id")
  companyBillingProfileId String @map("company_billing_profile_id")
  planId          String   @map("plan_id")
  invoiceNumber   String   @unique @map("invoice_number")
  amount          Float
  currency        String   @default("ZAR")
  status          String   @default("pending") // pending, paid, overdue, cancelled
  dueDate         DateTime @map("due_date")
  paidAt          DateTime? @map("paid_at")
  paymentMethod   String?  @map("payment_method")
  paymentReference String? @map("payment_reference")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  billingProfile  CompanyBillingProfile @relation(fields: [companyBillingProfileId], references: [profileId], onDelete: Cascade)
  billingPlan    BillingPlan @relation(fields: [planId], references: [planId], onDelete: Cascade)

  @@map("invoices")
}

// AI & Analytics
model AgentSession {
  sessionId       String   @id @default(cuid()) @map("session_id")
  agentName       String   @map("agent_name")
  contextData    Json?    @map("context_data")
  userId          String?  @map("user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("agent_sessions")
}

// Password Reset Tokens
model PasswordResetToken {
  id          String   @id @default(cuid())
  token       String   @unique // hashed token
  userId      String   @map("user_uid")
  user        User     @relation(fields: [userId], references: [uid], onDelete: Cascade)
  expiresAt   DateTime @map("expires_at")
  used        Boolean  @default(false)
  usedAt      DateTime? @map("used_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

// Email Logs
model EmailLog {
  id          String   @id @default(cuid())
  to          String
  subject     String
  type        String   // 'password_reset', 'welcome', etc.
  status      String   // 'sent', 'failed', 'pending'
  resendId    String?  @map("resend_id") // Resend message ID
  error       String?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([to])
  @@index([type])
  @@index([createdAt])
  @@map("email_logs")
}

// Matching System Tables

// Enhanced Candidate Profiles for Matching
model CandidateProfile {
  id                    String   @id @default(cuid()) @map("id")
  userId                String   @unique @map("user_id")
  personalInfo          Json     @map("personal_info")
  professionalSummary   String?  @map("professional_summary")
  skills                Json     @default("[]")
  experience            Json     @default("[]")
  education             Json     @default("[]")
  certifications        Json     @default("[]")
  preferences           Json     @default("{}")
  availability          Json     @default("{}")
  completionScore       Int      @default(0) @map("completion_score")
  visibility            String   @default("public") @map("visibility")
  isActive              Boolean  @default(true) @map("is_active")
  isPublic              Boolean  @default(true) @map("is_public")
  allowSearch           Boolean  @default(true) @map("allow_search")
  allowDirectContact    Boolean  @default(false) @map("allow_direct_contact")
  anonymousMatching     Boolean  @default(false) @map("anonymous_matching")
  dataRetentionPeriod   Int      @default(365) @map("data_retention_period")
  lastProfileView       DateTime? @map("last_profile_view")
  profileViews          Int      @default(0) @map("profile_views")
  searchRanking         Float    @default(0.0) @map("search_ranking")
  verificationStatus    String   @default("unverified") @map("verification_status")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relationships
  user                  User       @relation(fields: [userId], references: [uid], onDelete: Cascade)
  matchResults          MatchResult[]
  profileEmbeddings     ProfileEmbedding[]

  @@index([userId])
  @@index([completionScore])
  @@index([visibility])
  @@index([isActive])
  @@index([searchRanking])
  @@map("candidate_profiles")
}

// Enhanced Job Profiles for Matching
model JobProfile {
  id                    String   @id @default(cuid()) @map("id")
  jobId                 String   @unique @map("job_id")
  employerId            String   @map("employer_id")
  title                 String
  description           String
  requirements          Json     @default("{}")
  preferences           Json     @default("{}")
  compensation          Json     @default("{}")
  companyInfo           Json     @default("{}")
  location              Json     @default("{}")
  metadata              Json     @default("{}")
  isActive              Boolean  @default(true) @map("is_active")
  isFeatured            Boolean  @default(false) @map("is_featured")
  applicationCount      Int      @default(0) @map("application_count")
  viewCount             Int      @default(0) @map("view_count")
  searchRanking         Float    @default(0.0) @map("search_ranking")
  postedDate            DateTime @default(now()) @map("posted_date")
  expiryDate            DateTime? @map("expiry_date")
  urgency               String   @default("medium") @map("urgency")
  lastUpdated           DateTime @updatedAt @map("updated_at")

  // Relationships
  job                   Job        @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  employer              User       @relation(fields: [employerId], references: [uid])
  matchResults          MatchResult[]
  profileEmbeddings     ProfileEmbedding[]

  @@index([jobId])
  @@index([employerId])
  @@index([isActive])
  @@index([searchRanking])
  @@index([postedDate])
  @@index([expiryDate])
  @@map("job_profiles")
}

// Enhanced Match Results with Detailed Scoring
model MatchResult {
  id                    String   @id @default(cuid()) @map("id")
  candidateId           String   @map("candidate_id")
  jobId                 String   @map("job_id")
  score                 Float
  breakdown             Json     // ScoreBreakdown
  explanation           Json     // MatchExplanation
  confidence            Float
  status                String   @default("new")
  feedback              Json?    // MatchFeedback
  recommendationSource  String?  @map("recommendation_source")
  algorithmVersion      String?  @map("algorithm_version")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relationships
  candidateProfile      CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobProfile            JobProfile       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId])
  @@index([candidateId])
  @@index([jobId])
  @@index([score])
  @@index([status])
  @@index([createdAt])
  @@map("match_results")
}

// User Interactions for ML Training
model UserInteraction {
  id                    String   @id @default(cuid()) @map("id")
  userId                String   @map("user_id")
  interactionType       String   @map("interaction_type")
  targetType            String   @map("target_type")
  targetId              String   @map("target_id")
  metadata              Json?
  sessionId             String?  @map("session_id")
  timestamp             DateTime @default(now())

  // Relationships
  user                  User             @relation(fields: [userId], references: [uid], onDelete: Cascade)

  @@index([userId])
  @@index([interactionType])
  @@index([targetType])
  @@index([targetId])
  @@index([timestamp])
  @@index([sessionId])
  @@map("user_interactions")
}

// ML Models for Version Management
model MLModel {
  id                    String   @id @default(cuid()) @map("id")
  name                  String
  version               String
  type                  String
  accuracy              Float?
  features              Json
  modelData             Bytes?
  isActive              Boolean  @default(false) @map("is_active")
  trainedAt             DateTime? @map("trained_at")
  lastEvaluated         DateTime? @map("last_evaluated")
  metrics               Json?    // ModelMetrics
  hyperparameters       Json?
  trainingDataSize      Int?     @map("training_data_size")
  validationDataSize    Int?     @map("validation_data_size")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@index([type])
  @@index([isActive])
  @@index([trainedAt])
  @@map("ml_models")
}

// Profile Embeddings for Vector Search
model ProfileEmbedding {
  id                    String   @id @default(cuid()) @map("id")
  profileId             String   @map("profile_id")
  profileType           String   @map("profile_type") // 'candidate' or 'job'
  embedding             Float[]  // Vector representation
  metadata              Json
  model                 String   // Model used for embedding
  dimensions            Int
  confidence            Float?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relationships
  candidateProfile      CandidateProfile? @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "candidate_profile_embedding_fkey")
  jobProfile            JobProfile?       @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "job_profile_embedding_fkey")

  @@index([profileId])
  @@index([profileType])
  @@index([model])
  @@index([createdAt])
  @@map("profile_embeddings")
}

// Recommendations Storage
model Recommendation {
  id                    String   @id @default(cuid()) @map("id")
  userId                String   @map("user_id")
  targetId              String   @map("target_id")
  type                  String   // RecommendationType
  score                 Float
  reason                String
  metadata              Json     // RecommendationMetadata
  strategy              String   @map("recommendation_strategy")
  isActive              Boolean  @default(true) @map("is_active")
  isViewed              Boolean  @default(false) @map("is_viewed")
  isClicked             Boolean  @default(false) @map("is_clicked")
  isSaved               Boolean  @default(false) @map("is_saved")
  isDismissed           Boolean  @default(false) @map("is_dismissed")
  feedback              Json?
  expiresAt             DateTime? @map("expires_at")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([targetId])
  @@index([type])
  @@index([score])
  @@index([strategy])
  @@index([isActive])
  @@index([expiresAt])
  @@map("recommendations")
}

// Batch Processing Jobs
model BatchMatchJob {
  id                    String   @id @default(cuid()) @map("id")
  type                  String   // BatchMatchType
  profileIds            String[] @map("profile_ids")
  status                String   @default("queued") // BatchMatchStatus
  progress              Float    @default(0.0)
  totalProfiles         Int      @map("total_profiles")
  processedProfiles     Int      @default(0) @map("processed_profiles")
  results               Json?    // MatchResult[]
  error                 String?
  priority              Int      @default(0)
  createdBy             String   @map("created_by")
  startedAt             DateTime? @map("started_at")
  completedAt           DateTime? @map("completed_at")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([createdBy])
  @@index([createdAt])
  @@map("batch_match_jobs")
}

// Matching Analytics and Metrics
model MatchingAnalytics {
  id                    String   @id @default(cuid()) @map("id")
  date                  DateTime @default(now())
  totalMatches          Int      @default(0) @map("total_matches")
  averageScore          Float    @default(0.0) @map("average_score")
  matchConversionRate   Float    @default(0.0) @map("match_conversion_rate")
  userSatisfaction      Float    @default(0.0) @map("user_satisfaction")
  algorithmAccuracy     Float    @default(0.0) @map("algorithm_accuracy")
  averageResponseTime   Float    @default(0.0) @map("average_response_time")
  totalRecommendations  Int      @default(0) @map("total_recommendations")
  recommendationCTR     Float    @default(0.0) @map("recommendation_ctr")
  activeUsers           Int      @default(0) @map("active_users")
  newProfiles           Int      @default(0) @map("new_profiles")
  newJobs               Int      @default(0) @map("new_jobs")
  metadata              Json?

  @@unique([date])
  @@index([date])
  @@map("matching_analytics")
}

// ============================================================================
// NOTIFICATION SYSTEM MODELS
// ============================================================================

// Core notification storage with persistence
model Notification {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  type            String   // application_status, new_job, application_received, job_match, email_campaign, system_announcement
  channel         String   @default("in_app") // in_app, email, sms, push
  title           String
  message         String
  data            Json?    // Additional notification data
  priority        String   @default("normal") // low, normal, high, urgent
  status          String   @default("pending") // pending, sent, delivered, failed, read
  readAt          DateTime? @map("read_at")
  deliveredAt     DateTime? @map("delivered_at")
  failureReason   String?  @map("failure_reason")
  retryCount      Int      @default(0) @map("retry_count")
  maxRetries      Int      @default(3) @map("max_retries")
  scheduledFor    DateTime? @map("scheduled_for")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User     @relation(fields: [userId], references: [uid], onDelete: Cascade)
  deliveryLogs    NotificationDeliveryLog[]
  analyticsEvents AnalyticsEvent[]
  userJourneys    UserJourney[]

  @@index([userId])
  @@index([type])
  @@index([channel])
  @@index([status])
  @@index([priority])
  @@index([scheduledFor])
  @@index([createdAt])
  @@map("notifications")
}

// User notification preferences and settings
model NotificationPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique @map("user_id")

  // Channel preferences
  emailEnabled          Boolean  @default(true) @map("email_enabled")
  smsEnabled            Boolean  @default(false) @map("sms_enabled")
  pushEnabled           Boolean  @default(true) @map("push_enabled")
  inAppEnabled          Boolean  @default(true) @map("in_app_enabled")

  // Notification type preferences
  applicationUpdates    Boolean  @default(true) @map("application_updates")
  newJobAlerts          Boolean  @default(true) @map("new_job_alerts")
  jobMatches            Boolean  @default(true) @map("job_matches")
  applicationReceived   Boolean  @default(true) @map("application_received")
  systemAnnouncements   Boolean  @default(true) @map("system_announcements")
  marketingEmails       Boolean  @default(false) @map("marketing_emails")

  // Delivery timing preferences
  quietHoursStart       String?  @map("quiet_hours_start") // HH:MM format
  quietHoursEnd         String?  @map("quiet_hours_end")   // HH:MM format
  timezone              String   @default("UTC")
  frequency             String   @default("immediate") // immediate, hourly, daily, weekly

  // Contact information
  phoneNumber           String?  @map("phone_number")
  alternateEmail        String?  @map("alternate_email")

  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relationships
  user                  User     @relation(fields: [userId], references: [uid], onDelete: Cascade)

  @@map("notification_preferences")
}

// Email templates for different notification types
model NotificationTemplate {
  id              String   @id @default(cuid())
  name            String   @unique
  type            String   // application_status, new_job, job_match, welcome, etc.
  channel         String   // email, sms, push
  subject         String?  // For email templates
  htmlContent     String?  @map("html_content")
  textContent     String   @map("text_content")
  variables       Json?    // Template variables schema
  isActive        Boolean  @default(true) @map("is_active")
  version         Int      @default(1)
  createdBy       String   @map("created_by")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@index([channel])
  @@index([isActive])
  @@map("notification_templates")
}

// Delivery tracking and analytics
model NotificationDeliveryLog {
  id              String   @id @default(cuid())
  notificationId  String   @map("notification_id")
  channel         String
  status          String   // sent, delivered, failed, bounced, opened, clicked
  provider        String?  // sendgrid, twilio, firebase, etc.
  providerMessageId String? @map("provider_message_id")
  errorCode       String?  @map("error_code")
  errorMessage    String?  @map("error_message")
  metadata        Json?    // Provider-specific data
  attemptedAt     DateTime @default(now()) @map("attempted_at")
  deliveredAt     DateTime? @map("delivered_at")
  openedAt        DateTime? @map("opened_at")
  clickedAt       DateTime? @map("clicked_at")

  // Relationships
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([channel])
  @@index([status])
  @@index([attemptedAt])
  @@map("notification_delivery_logs")
}

// Email campaigns and bulk messaging
model NotificationCampaign {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String   // email_campaign, system_announcement, promotional
  templateId      String?  @map("template_id")
  targetAudience  Json     @map("target_audience") // User selection criteria
  status          String   @default("draft") // draft, scheduled, sending, completed, cancelled
  scheduledFor    DateTime? @map("scheduled_for")
  startedAt       DateTime? @map("started_at")
  completedAt     DateTime? @map("completed_at")
  totalRecipients Int      @default(0) @map("total_recipients")
  sentCount       Int      @default(0) @map("sent_count")
  deliveredCount  Int      @default(0) @map("delivered_count")
  failedCount     Int      @default(0) @map("failed_count")
  openedCount     Int      @default(0) @map("opened_count")
  clickedCount    Int      @default(0) @map("clicked_count")
  createdBy       String   @map("created_by")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  analytics       CampaignAnalytics[]

  @@index([status])
  @@index([scheduledFor])
  @@index([createdBy])
  @@index([createdAt])
  @@map("notification_campaigns")
}

// Individual analytics events for detailed tracking
model AnalyticsEvent {
  id              String   @id @default(cuid())
  eventType       String   @map("event_type") // sent, delivered, opened, clicked, bounced, failed, unsubscribed, spam_reported
  notificationId  String   @map("notification_id")
  userId          String   @map("user_id")
  channel         String   // email, sms, push, in_app, web
  timestamp       DateTime @default(now())
  metadata        Json?    // Additional event data
  campaignId      String?  @map("campaign_id")
  templateId      String?  @map("template_id")
  deviceInfo      Json?    @map("device_info") // platform, device, browser, os
  locationInfo    Json?    @map("location_info") // country, region, city, timezone

  // Relationships
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User @relation(fields: [userId], references: [uid], onDelete: Cascade)

  @@index([eventType])
  @@index([notificationId])
  @@index([userId])
  @@index([channel])
  @@index([timestamp])
  @@index([campaignId])
  @@index([templateId])
  @@map("analytics_events")
}

// User journey tracking for advanced analytics
model UserJourney {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  sessionId       String?  @map("session_id")
  journeyType     String   @map("journey_type") // onboarding, job_application, profile_completion, etc.
  stepName        String   @map("step_name")
  stepOrder       Int      @map("step_order")
  timestamp       DateTime @default(now())
  duration        Int?     // Time spent on this step in seconds
  metadata        Json?    // Step-specific data
  notificationId  String?  @map("notification_id") // If triggered by notification

  // Relationships
  user           User @relation(fields: [userId], references: [uid], onDelete: Cascade)
  notification   Notification? @relation(fields: [notificationId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([sessionId])
  @@index([journeyType])
  @@index([timestamp])
  @@index([notificationId])
  @@map("user_journeys")
}

// Campaign analytics for detailed campaign performance
model CampaignAnalytics {
  id              String   @id @default(cuid())
  campaignId      String   @map("campaign_id")
  date            DateTime @default(now())
  channel         String
  segment         String?  // User segment if applicable
  totalSent       Int      @default(0) @map("total_sent")
  totalDelivered  Int      @default(0) @map("total_delivered")
  totalFailed     Int      @default(0) @map("total_failed")
  totalOpened     Int      @default(0) @map("total_opened")
  totalClicked    Int      @default(0) @map("total_clicked")
  totalBounced    Int      @default(0) @map("total_bounced")
  totalUnsubscribed Int    @default(0) @map("total_unsubscribed")
  revenue         Float?   // Revenue attributed to this campaign
  conversions     Int      @default(0) // Conversion events

  // Relationships
  campaign       NotificationCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date, channel, segment])
  @@index([campaignId])
  @@index([date])
  @@index([channel])
  @@map("campaign_analytics")
}

// Notification analytics and metrics (aggregated daily)
model NotificationAnalytics {
  id                    String   @id @default(cuid())
  date                  DateTime @default(now())
  channel               String
  totalSent             Int      @default(0) @map("total_sent")
  totalDelivered        Int      @default(0) @map("total_delivered")
  totalFailed           Int      @default(0) @map("total_failed")
  totalOpened           Int      @default(0) @map("total_opened")
  totalClicked          Int      @default(0) @map("total_clicked")
  deliveryRate          Float    @default(0.0) @map("delivery_rate")
  openRate              Float    @default(0.0) @map("open_rate")
  clickRate             Float    @default(0.0) @map("click_rate")
  averageDeliveryTime   Float    @default(0.0) @map("average_delivery_time") // in seconds
  bounceRate            Float    @default(0.0) @map("bounce_rate")
  unsubscribeRate       Float    @default(0.0) @map("unsubscribe_rate")

  @@unique([date, channel])
  @@index([date])
  @@index([channel])
  @@map("notification_analytics")
}

// ==================== APPLICATION MANAGEMENT MODELS ====================

// Application Timeline Events
model ApplicationTimeline {
  timelineId      String   @id @default(cuid()) @map("timeline_id")
  applicationId   String   @map("application_id")
  status          ApplicationStatus
  notes           String?
  createdBy       String?  @map("created_by")
  createdByRole   String?  @map("created_by_role") // candidate, employer, system
  createdAt       DateTime @default(now()) @map("created_at")
  metadata        Json?    // Additional event data

  // Relationships
  application     JobApplication @relation(fields: [applicationId], references: [applicationId], onDelete: Cascade)

  @@index([applicationId])
  @@index([status])
  @@index([createdAt])
  @@index([createdByRole])
  @@map("application_timeline")
}

// Application Attachments
model ApplicationAttachment {
  attachmentId    String   @id @default(cuid()) @map("attachment_id")
  applicationId   String   @map("application_id")
  fileName        String   @map("file_name")
  fileUrl         String   @map("file_url")
  fileType        String   @map("file_type")
  fileSize        Int      @map("file_size")
  description     String?
  uploadedBy      String?  @map("uploaded_by")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relationships
  application     JobApplication @relation(fields: [applicationId], references: [applicationId], onDelete: Cascade)

  @@index([applicationId])
  @@index([uploadedBy])
  @@index([createdAt])
  @@map("application_attachments")
}

// Application Notes
model ApplicationNote {
  noteId          String   @id @default(cuid()) @map("note_id")
  applicationId   String   @map("application_id")
  content         String
  isPrivate       Boolean  @default(true) @map("is_private")
  tags            Json?    // Array of tags as JSON
  createdBy       String   @map("created_by")
  createdById     String   @map("created_by_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  application     JobApplication @relation(fields: [applicationId], references: [applicationId], onDelete: Cascade)

  @@index([applicationId])
  @@index([createdById])
  @@index([createdAt])
  @@map("application_notes")
}

// Interview Schedule
model InterviewSchedule {
  interviewId     String   @id @default(cuid()) @map("interview_id")
  applicationId   String   @map("application_id")
  type            String   // phone, video, onsite, technical, behavioral, panel
  scheduledAt     DateTime @map("scheduled_at")
  duration        Int      // in minutes
  location        String?
  meetingLink     String?  @map("meeting_link")
  interviewers    Json?    // Array of interviewer information
  instructions     String? @map("instructions")
  preparation     Json?    // Array of preparation items
  status          String   @default("scheduled") // scheduled, completed, cancelled, rescheduled
  feedback        String?
  rating          Int?     // 1-5 scale
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  application     JobApplication @relation(fields: [applicationId], references: [applicationId], onDelete: Cascade)

  @@index([applicationId])
  @@index([scheduledAt])
  @@index([status])
  @@index([type])
  @@map("interview_schedule")
}

// ============================================================================
// RESUME TEMPLATE SYSTEM MODELS
// ============================================================================

// Resume Templates
model ResumeTemplate {
  templateId      String   @id @default(cuid()) @map("template_id")
  name            String
  description     String
  category        String   // professional, modern, academic, creative, technical
  subcategory     String?  // executive, software-engineer, healthcare, etc.
  previewUrl      String   @map("preview_url") // URL to preview image
  largePreviewUrl String?  @map("large_preview_url") // URL to large preview
  animatedPreviewUrl String? @map("animated_preview_url") // URL to animated preview

  // Template configuration (JSON fields for flexibility)
  layout          Json     // TemplateLayout configuration
  styling         Json     // TemplateStyling configuration
  sections        Json     // TemplateSection[] configuration
  features        Json     // TemplateFeatures configuration
  atsOptimization Json     // ATSOptimization configuration
  customization   Json     // CustomizationOptions configuration
  metadata        Json     // TemplateMetadata configuration

  // Template status and availability
  isActive        Boolean  @default(true) @map("is_active")
  isPremium       Boolean  @default(false) @map("is_premium")
  version         String   @default("1.0.0")
  author          String?  // Template author
  license         String?  // Template license type

  // Usage analytics
  downloadCount   Int      @default(0) @map("download_count")
  rating          Float    @default(0)
  reviewCount     Int      @default(0) @map("review_count")

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  customizations  ResumeTemplateCustomization[]
  usage           ResumeTemplateUsage[]
  history         ResumeTemplateHistory[]
  resumes         Resume[]

  @@index([category])
  @@index([subcategory])
  @@index([isActive])
  @@index([isPremium])
  @@index([rating])
  @@index([downloadCount])
  @@map("resume_templates")
}

// Template Customizations
model ResumeTemplateCustomization {
  id              String   @id @default(cuid())
  userUid         String   @map("user_uid")
  resumeId        String?  @map("resume_id") // Optional: link to specific resume
  templateId      String   @map("template_id")

  // Customization data
  name            String?  // User-defined name for this customization
  colorScheme     Json     // Color customization data
  typography      Json     // Font customization data
  layout          Json     // Layout customization data
  sectionSettings Json     @map("section_settings") // Section visibility and ordering
  customSections  Json?    @map("custom_sections") // User-defined custom sections
  branding        Json?    // Logo, watermark, etc.

  // Metadata
  isDefault       Boolean  @default(false) @map("is_default")
  version         String   @default("1.0.0")
  changeCount     Int      @default(0) @map("change_count")
  lastApplied     DateTime? @map("last_applied")

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User     @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  template        ResumeTemplate @relation(fields: [templateId], references: [templateId], onDelete: Cascade)
  resume          Resume?  @relation(fields: [resumeId], references: [resumeId])
  usage           ResumeTemplateUsage[]

  @@unique([userUid, templateId, name])
  @@unique([resumeId]) // Add unique constraint for one-to-one relation
  @@index([userUid])
  @@index([templateId])
  @@index([resumeId])
  @@map("resume_template_customizations")
}

// Template Usage Analytics
model ResumeTemplateUsage {
  id              String   @id @default(cuid())
  userUid         String   @map("user_uid")
  templateId      String   @map("template_id")
  customizationId String?  @map("customization_id")
  resumeId        String?  @map("resume_id")

  // Usage metrics
  useCount        Int      @default(0) @map("use_count")
  lastUsed        DateTime? @map("last_used")
  averageAtsScore Float?  @default(0) @map("average_ats_score")
  exportCount     Int      @default(0) @map("export_count")

  // User feedback
  rating          Int?     // 1-5 rating
  feedback        String?  // User feedback text
  recommendationScore Float? @default(0) @map("recommendation_score") // How well template was recommended

  // Analytics data
  sessionDuration Int?     @map("session_duration") // Average session duration in seconds
  customizationCount Int?   @map("customization_count") // Number of customizations made
  shareCount      Int      @default(0) @map("share_count") // How many times shared

  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User                       @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  template        ResumeTemplate             @relation(fields: [templateId], references: [templateId], onDelete: Cascade)
  customization   ResumeTemplateCustomization? @relation(fields: [customizationId], references: [id], onDelete: SetNull)
  resume          Resume?                    @relation(fields: [resumeId], references: [resumeId], onDelete: SetNull)

  @@unique([userUid, templateId])
  @@index([userUid])
  @@index([templateId])
  @@index([lastUsed])
  @@map("resume_template_usage")
}

// Template History Tracking
model ResumeTemplateHistory {
  id              String   @id @default(cuid())
  userUid         String   @map("user_uid")
  resumeId        String   @map("resume_id")
  templateId      String   @map("template_id")
  customizationId String?  @map("customization_id")

  // Action tracking
  action          String   // selected, customized, exported, reverted, shared, etc.
  templateName    String   @map("template_name") // Snapshot of template name at time of action

  // Change data
  previousState   Json?    @map("previous_state") // Previous template/customization state
  newState        Json?    @map("new_state") // New template/customization state
  changeSummary   String?  @map("change_summary") // Human-readable summary of changes
  changeReason    String?  @map("change_reason") // User-provided reason for change

  // Metadata
  sessionId       String?  @map("session_id") // For tracking user sessions
  ipAddress       String?  @map("ip_address") // For security analytics
  userAgent       String?  @map("user_agent") // Browser/client information

  createdAt       DateTime @default(now()) @map("created_at")

  // Relationships
  user            User     @relation(fields: [userUid], references: [uid], onDelete: Cascade)
  resume          Resume   @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)
  template        ResumeTemplate @relation(fields: [templateId], references: [templateId], onDelete: Cascade)

  @@index([userUid])
  @@index([resumeId])
  @@index([templateId])
  @@index([action])
  @@index([createdAt])
  @@map("resume_template_history")
}